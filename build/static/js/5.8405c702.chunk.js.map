{"version":3,"sources":["services/api.ts","util.ts","../node_modules/unquote/index.js","features/diary/DiaryTile.tsx","features/diary/DiaryEntriesList.tsx","features/diary/Diaries.tsx","../../index.js","features/entry/Editor.tsx","features/home/Home.tsx"],"names":["http","axios","create","baseURL","defaults","headers","post","interceptors","response","use","a","status","data","error","request","showAlert","message","Promise","reject","titleText","alertType","Swal","fire","position","timer","timerProgressBar","toast","showConfirmButton","showCancelButton","cancelButtonText","icon","showClass","popup","backdrop","hideClass","reg","module","exports","str","test","charAt","substr","length","buttonStyle","fontSize","margin","DiaryTile","props","useState","diary","setDiary","isEditing","setIsEditing","dispatch","useAppDispatch","totalEntries","entryIds","className","title","onClick","style","cursor","value","onChange","e","target","onKeyUp","key","put","id","then","updateDiary","finally","display","setCanEdit","setActiveDiaryId","setCurrentlyEditing","to","width","DiaryEntriesList","entries","useSelector","state","useParams","useEffect","get","_entries","sortByLastUpdated","sort","b","dayjs","updatedAt","unix","setEntries","console","log","map","entry","Diaries","diaries","user","sortedByUpdatedAt","addDiary","fetchDiaries","createDiary","mixin","input","confirmButtonText","progressSteps","queue","inputOptions","private","public","inputValue","result","type","userId","_user","setUser","padding","path","idx","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","class","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","for","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","LIST_ITEM_R","LIST_R","LINK_R","IMAGE_R","BLOCK_SYNTAXES","slugify","parseTableAlignCapture","parseTableRow","c","parseTable","parseTableAlign","parseTableCells","align","cells","header","getTableStyle","textAlign","parserFor","Object","keys","normalizeWhitespace","inlineRegex","simpleInlineRegex","blockRegex","anyScopeRegex","sanitizeUrl","decodeURIComponent","unescapeUrl","parseInline","parseSimpleInline","parseBlock","parseCaptureInline","content","captureNothing","renderNothing","cx","getTag","compiler","inline","normalizeAttributeKey","attributeValueToJSXPropValue","blockQuote","match","order","parse","react","breakLine","breakThematic","codeBlock","lang","codeFenced","codeInline","footnote","identifier","footnoteReference","href","gfmTask","completed","checked","readOnly","heading","level","headingSetext","htmlComment","image","alt","src","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","list","exec","items","RegExp","ordered","start","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","f","tableSeparator","text","textBolded","textEmphasized","textEscaped","textStrikethroughed","some","containsBlockSyntax","indexOf","attrs","noInnerParse","tag","Array","isArray","reactFor","ruleOutput","Markdown","children","options","Editor","editor","currentlyEditing","canEdit","activeDiaryId","editedEntry","updateEditedEntry","saveEntry","_entry","updateEntry","flexWrap","alignItems","marginBottom","paddingBottom","borderBottom","preventDefault","marginLeft","disabled","placeholder","Home"],"mappings":"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","file":"static/js/5.8405c702.chunk.js","sourcesContent":["import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\nimport { showAlert } from '../util';\n\nconst http: AxiosInstance = axios.create({\n  baseURL: 'https://diaries.app',\n});\n\nhttp.defaults.headers.post['Content-Type'] = 'application/json';\n\nhttp.interceptors.response.use(\n  async (response: AxiosResponse): Promise<any> => {\n    if (response.status >= 200 && response.status < 300) {\n      return response.data;\n    }\n  },\n  (error: AxiosError) => {\n    const {\n      response,\n      request,\n    }: { response?: AxiosResponse; request?: XMLHttpRequest } = error;\n    if (response) {\n      if (response.status >= 400 && response.status < 500) {\n        showAlert(response.data?.data?.message, 'error');\n        return null;\n      }\n    } else if (request) {\n      showAlert('Request failed. Please try again.', 'error');\n      return null;\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default http;\n","import Swal, { SweetAlertIcon } from 'sweetalert2';\n\nexport const showAlert = (\n  titleText = 'Something happened.',\n  alertType?: SweetAlertIcon\n): void => {\n  Swal.fire({\n    titleText,\n    position: 'top-end',\n    timer: 3000,\n    timerProgressBar: true,\n    toast: true,\n    showConfirmButton: false,\n    showCancelButton: true,\n    cancelButtonText: 'Dismiss',\n    icon: alertType,\n    showClass: {\n      popup: 'swal2-noanimation',\n      backdrop: 'swal2-noanimation',\n    },\n    hideClass: {\n      popup: '',\n      backdrop: '',\n    },\n  });\n};\n","var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","import React, { FC, useState } from 'react';\nimport { Diary } from '../../interfaces/diary.interface';\nimport http from '../../services/api';\nimport { updateDiary } from './diariesSlice';\nimport {\n  setCanEdit,\n  setActiveDiaryId,\n  setCurrentlyEditing,\n} from '../entry/editorSlice';\nimport { showAlert } from '../../util';\nimport { Link } from 'react-router-dom';\nimport { useAppDispatch } from '../../store';\n\ninterface Props {\n  diary: Diary;\n}\n\nconst buttonStyle: React.CSSProperties = {\n  fontSize: '0.7em',\n  margin: '0 0.5em',\n};\n\nconst DiaryTile: FC<Props> = (props) => {\n  const [diary, setDiary] = useState(props.diary);\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const totalEntries = props.diary?.entryIds?.length;\n\n  const saveChanges = () => {\n    http\n      .put<Diary, Diary>(`/diaries/${diary.id}`, diary)\n      .then((diary) => {\n        if (diary) {\n          dispatch(updateDiary(diary));\n          showAlert('Saved!', 'success');\n        }\n      })\n      .finally(() => {\n        setIsEditing(false);\n      });\n  };\n\n  return (\n    <div className=\"diary-tile\">\n      <h2\n        className=\"title\"\n        title=\"Click to edit\"\n        onClick={() => setIsEditing(true)}\n        style={{\n          cursor: 'pointer',\n        }}\n      >\n        {isEditing ? (\n          <input\n            value={diary.title}\n            onChange={(e) => {\n              setDiary({\n                ...diary,\n                title: e.target.value,\n              });\n            }}\n            onKeyUp={(e) => {\n              if (e.key === 'Enter') {\n                saveChanges();\n              }\n            }}\n          />\n        ) : (\n          <span>{diary.title}</span>\n        )}\n      </h2>\n      <p className=\"subtitle\">{totalEntries ?? '0'} saved entries</p>\n\n      <div style={{ display: 'flex' }}>\n        <button\n          style={buttonStyle}\n          onClick={() => {\n            dispatch(setCanEdit(true));\n            dispatch(setActiveDiaryId(diary.id as string));\n            dispatch(setCurrentlyEditing(null));\n          }}\n        >\n          Add New Entry\n        </button>\n        <Link to={`diary/${diary.id}`} style={{ width: '100%' }}>\n          <button className=\"secondary\" style={buttonStyle}>\n            View all &rarr;\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default DiaryTile;\n","import React, { FC, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport http from '../../services/api';\nimport { Entry } from '../../interfaces/entry.interface';\nimport { setEntries } from '../entry/entriesSlice';\nimport { setCurrentlyEditing, setCanEdit } from '../entry/editorSlice';\nimport dayjs from 'dayjs';\nimport { useAppDispatch } from '../../store';\n\nconst DiaryEntriesList: FC = () => {\n  const { entries } = useSelector((state: RootState) => state);\n  const dispatch = useAppDispatch();\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (id != null) {\n      http\n        .get<null, { entries: Entry[] }>(`/diaries/entries/${id}`)\n        .then(({ entries: _entries }) => {\n          if (_entries) {\n            const sortByLastUpdated = _entries.sort((a, b) => {\n              return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\n            });\n            dispatch(setEntries(sortByLastUpdated));\n          }\n        });\n    }\n  }, [id, dispatch]);\n  console.log(\"Entries >>> \", entries)\n  return (\n    <div className=\"entries\">\n      <header>\n        <Link to=\"/\">\n          <h3>&larr; Go Back</h3>\n        </Link>\n      </header>\n      <ul>\n        {entries.map((entry) => (\n          <li\n            key={entry.id}\n            onClick={() => {\n              dispatch(setCurrentlyEditing(entry));\n              dispatch(setCanEdit(true));\n            }}\n          >\n            {entry.title}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default DiaryEntriesList;\n","import React, { FC, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport http from '../../services/api';\nimport { Diary } from '../../interfaces/diary.interface';\nimport { addDiary } from './diariesSlice';\nimport Swal from 'sweetalert2';\nimport { setUser } from '../auth/userSlice';\nimport DiaryTile from './DiaryTile';\nimport { User } from '../../interfaces/user.interface';\nimport { Route, Switch } from 'react-router-dom';\nimport DiaryEntriesList from './DiaryEntriesList';\nimport { useAppDispatch } from '../../store';\nimport dayjs from 'dayjs';\n\nconst Diaries: FC = () => {\n  const dispatch = useAppDispatch();\n  const diaries = useSelector((state: RootState) => state.diaries);\n  const user = useSelector((state: RootState) => state.user);\n\n  useEffect(() => {\n    const fetchDiaries = async () => {\n      if (user) {\n        http.get<null, Diary[]>(`diaries/${user.id}`).then((data) => {\n          if (data && data.length > 0) {\n            const sortedByUpdatedAt = data.sort((a, b) => {\n              return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\n            });\n            dispatch(addDiary(sortedByUpdatedAt));\n          }\n        });\n      }\n    };\n\n    fetchDiaries();\n  }, [dispatch, user]);\n\n  const createDiary = async () => {\n    const result = (await Swal.mixin({\n      input: 'text',\n      confirmButtonText: 'Next &rarr;',\n      showCancelButton: true,\n      progressSteps: ['1', '2'],\n    }).queue([\n      {\n        titleText: 'Diary title',\n        input: 'text',\n      },\n      {\n        titleText: 'Private or public diary?',\n        input: 'radio',\n        inputOptions: {\n          private: 'Private',\n          public: 'Public',\n        },\n        inputValue: 'private',\n      },\n    ])) as any;\n    if (result.value) {\n      const { value } = result;\n      const { diary, user: _user } = await http.post<\n        Partial<Diary>,\n        { diary: Diary; user: User }\n      >('/diaries/', {\n        title: value[0],\n        type: value[1],\n        userId: user?.id,\n      });\n      if (diary && user) {\n        dispatch(addDiary([diary] as Diary[]));\n        dispatch(addDiary([diary] as Diary[]));\n        dispatch(setUser(_user));\n\n        return Swal.fire({\n          titleText: 'All done!',\n          confirmButtonText: 'OK!',\n        });\n      }\n    }\n    Swal.fire({\n      titleText: 'Cancelled',\n    });\n  };\n\n  return (\n    <div style={{ padding: '1em 0.4em' }}>\n      <Switch>\n        <Route path=\"/diary/:id\">\n          <DiaryEntriesList />\n        </Route>\n        <Route path=\"/\">\n          <button onClick={createDiary}>Create New</button>\n          {diaries.map((diary, idx) => (\n            <DiaryTile key={idx} diary={diary} />\n          ))}\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default Diaries;\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react';\nimport unquote from 'unquote';\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n};\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n};\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script'];\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi;\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\nconst BLOCK_END_R = /\\n{2,}$/;\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/;\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm;\nconst BREAK_LINE_R = /^ {2,}\\n/;\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/;\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/;\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/;\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/;\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/;\nconst CR_NEWLINE_R = /\\r\\n?/g;\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/;\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/;\nconst FORMFEED_R = /\\f/g;\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/;\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/;\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/;\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i;\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g;\n\nconst HTML_COMMENT_R = /^<!--.*?-->/;\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/;\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i;\nconst INTERPOLATION_R = /^\\{.*\\}$/;\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/;\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/;\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/;\nconst LIST_ITEM_END_R = / *\\n+$/;\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi;\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/;\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/;\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/;\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g;\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/;\nconst TAB_R = /\\t/g;\nconst TABLE_SEPARATOR_R = /^ *\\| */;\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g;\nconst TABLE_CELL_END_TRIM = / *$/;\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/;\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/;\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/;\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/;\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/;\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/;\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i;\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g;\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/;\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi;\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)';\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +';\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX);\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n);\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n);\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*';\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*';\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n];\n\nfunction containsBlockSyntax(input) {\n  return BLOCK_SYNTAXES.some(r => r.test(input));\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase();\n}\n\nfunction parseTableAlignCapture(alignCapture) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right';\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center';\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left';\n  }\n\n  return null;\n}\n\nfunction parseTableRow(source, parse, state) {\n  const prevInTable = state.inTable;\n  state.inTable = true;\n  const tableRow = parse(source.trim(), state);\n  state.inTable = prevInTable;\n\n  let cells = [[]];\n  tableRow.forEach(function(node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n        if (i !== 0 && i !== tableRow.length - 1) {\n          // Split the current row:\n          cells.push([]);\n        }\n    } else {\n      if (node.type === 'text' && (\n        tableRow[i + 1] == null ||\n        tableRow[i + 1].type === 'tableSeparator'\n      )) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, \"\");\n      }\n      cells[cells.length - 1].push(node);\n    }\n  });\n  return cells;\n}\n\nfunction parseTableAlign(source /*, parse, state*/) {\n  const alignText = source\n    .replace(TABLE_TRIM_PIPES, '')\n    .split('|');\n\n  return alignText.map(parseTableAlignCapture);\n}\n\nfunction parseTableCells(source, parse, state) {\n  const rowsText = source\n    .trim()\n    .split('\\n');\n\n  return rowsText.map(function(rowText) {\n      return parseTableRow(rowText, parse, state);\n  });\n}\n\nfunction parseTable(capture, parse, state) {\n  state.inline = true;\n  const header = parseTableRow(capture[1], parse, state);\n  const align = parseTableAlign(capture[2], parse, state);\n  const cells = parseTableCells(capture[3], parse, state);\n  state.inline = false;\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  };\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      };\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-');\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function(_, letter) {\n      return letter.toUpperCase();\n    });\n  }\n\n  return key;\n}\n\nfunction attributeValueToJSXPropValue(key, value) {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function(styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'));\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      );\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim();\n\n      return styles;\n    }, {});\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1);\n  }\n\n  if (value === 'true') {\n    return true;\n  } else if (value === 'false') {\n    return false;\n  }\n\n  return value;\n}\n\nfunction normalizeWhitespace(source) {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ');\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(rules) {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules);\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function(type) {\n      let order = rules[type].order;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        );\n      }\n    });\n  }\n\n  ruleList.sort(function(typeA, typeB) {\n    let orderA = rules[typeA].order;\n    let orderB = rules[typeB].order;\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB;\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1;\n    }\n\n    return 1;\n  });\n\n  function nestedParse(source, state) {\n    let result = [];\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = '';\n    while (source) {\n      let i = 0;\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i];\n        const rule = rules[ruleType];\n        const capture = rule.match(source, state, prevCapture);\n\n        if (capture) {\n          const currCaptureString = capture[0];\n          source = source.substring(currCaptureString.length);\n          const parsed = rule.parse(capture, nestedParse, state);\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType;\n          }\n\n          result.push(parsed);\n\n          prevCapture = currCaptureString;\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    return result;\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state);\n  };\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return null;\n    } else {\n      return regex.exec(source);\n    }\n  };\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex) {\n  return function match(source /*, state*/) {\n    return regex.exec(source);\n  };\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(ast, state) {\n    state = state || {};\n    if (Array.isArray(ast)) {\n      const oldKey = state.key;\n      const result = [];\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false;\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i;\n\n        const nodeOut = nestedReactOutput(ast[i], state);\n        const isString = typeof nodeOut === 'string';\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut;\n        } else {\n          result.push(nodeOut);\n        }\n\n        lastWasString = isString;\n      }\n\n      state.key = oldKey;\n\n      return result;\n    }\n\n    return outputFunc(ast, nestedReactOutput, state);\n  };\n}\n\nfunction sanitizeUrl(url) {\n  try {\n    const decoded = decodeURIComponent(url)\n      .replace(/[^A-Za-z0-9/:]/g, '');\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        );\n      }\n\n      return null;\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      );\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null;\n  }\n\n  return url;\n}\n\nfunction unescapeUrl(rawUrlString) {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1');\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = true;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = false;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\nfunction parseBlock(parse, content, state) {\n  state.inline = false;\n  return parse(content + '\\n\\n', state);\n}\n\nfunction parseCaptureInline(capture, parse, state) {\n  return {\n    content: parseInline(parse, capture[1], state),\n  };\n}\n\nfunction captureNothing() {\n  return {};\n}\n\nfunction renderNothing() {\n  return null;\n}\n\nfunction ruleOutput(rules) {\n  return function nestedRuleOutput(ast, outputFunc, state) {\n    return rules[ast.type].react(ast, outputFunc, state);\n  };\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ');\n}\n\nfunction get(src, path, fb) {\n  let ptr = src;\n  const frags = path.split('.');\n\n  while (frags.length) {\n    ptr = ptr[frags[0]];\n\n    if (ptr === undefined) break;\n    else frags.shift();\n  }\n\n  return ptr || fb;\n}\n\nfunction getTag(tag, overrides) {\n  const override = get(overrides, tag);\n\n  if (!override) return tag;\n\n  return typeof override === 'function' || (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag);\n}\n\n/**\n * anything that must scan the tree before everything else\n */\nconst PARSE_PRIORITY_MAX = 1;\n\n/**\n * scans for block-level constructs\n */\nconst PARSE_PRIORITY_HIGH = 2;\n\n/**\n * inline w/ more priority than other inline\n */\nconst PARSE_PRIORITY_MED = 3;\n\n/**\n * inline elements\n */\nconst PARSE_PRIORITY_LOW = 4;\n\n/**\n * bare text and stuff that is considered leftovers\n */\nconst PARSE_PRIORITY_MIN = 5;\n\nexport function compiler(markdown, options) {\n  options = options || {};\n  options.overrides = options.overrides || {};\n  options.slugify = options.slugify || slugify;\n  options.namedCodesToUnicode = options.namedCodesToUnicode \n    ? {...namedCodesToUnicode, ...options.namedCodesToUnicode}\n    : namedCodesToUnicode;\n\n  const createElementFn = options.createElement || React.createElement;\n\n  // eslint-disable-next-line no-unused-vars\n  function h(tag, props, ...children) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {});\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className:\n          cx(props && props.className, overrideProps.className) || undefined,\n      },\n      ...children\n    );\n  }\n\n  function compile(input) {\n    let inline = false;\n\n    if (options.forceInline) {\n      inline = true;\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false;\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    );\n\n    let jsx;\n    if (arr.length > 1) {\n      jsx = inline ? <span key=\"outer\">{arr}</span> : <div key=\"outer\">{arr}</div>;\n    } else if (arr.length === 1) {\n      jsx = arr[0];\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        jsx = <span key=\"outer\">{jsx}</span>;\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = <span key=\"outer\" />;\n    }\n\n    return jsx;\n  }\n\n  function attrStringToMap(str) {\n    const attributes = str.match(ATTR_EXTRACTOR_R);\n\n    return attributes\n      ? attributes.reduce(function(map, raw, index) {\n          const delimiterIdx = raw.indexOf('=');\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(\n              raw.slice(0, delimiterIdx)\n            ).trim();\n            const value = unquote(raw.slice(delimiterIdx + 1).trim());\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key;\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value));\n\n            if (\n              HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n              HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue)\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              );\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true;\n          }\n\n          return map;\n        }, {})\n      : undefined;\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`);\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`);\n    }\n  }\n\n  const footnotes = [];\n  const refs = {};\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        };\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        );\n      },\n    },\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />;\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />;\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let content = capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, '');\n        return {\n          content: content,\n          lang: undefined,\n        };\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        );\n      },\n    },\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        };\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>;\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        });\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        );\n      },\n    },\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        };\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        );\n      },\n    },\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        };\n      },\n      react(node, output, state) {\n        const Tag = `h${node.level}`;\n        return (\n          <Tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </Tag>\n        );\n      },\n    },\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        };\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse() {\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        );\n      },\n    },\n\n    link: {\n      match: inlineRegex(LINK_R, false),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        );\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        };\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        };\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1];\n        let target = capture[1];\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target;\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        };\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture);\n        const isListBlock = state._list || !state.inline;\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source;\n\n          return LIST_R.exec(source);\n        } else {\n          return null;\n        }\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2];\n        const ordered = bullet.length > 1;\n        const start = ordered ? +bullet : undefined;\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R);\n\n        let lastItemWasAParagraph = false;\n        const itemContent = items.map(function(item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length;\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm');\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '');\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1;\n          const containsBlocks = content.indexOf('\\n\\n') !== -1;\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph);\n          lastItemWasAParagraph = thisItemIsAParagraph;\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline;\n          const oldStateList = state._list;\n          state._list = true;\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent;\n          if (thisItemIsAParagraph) {\n            state.inline = false;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n');\n          } else {\n            state.inline = true;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '');\n          }\n\n          const result = parse(adjustedContent, state);\n\n          // Restore our state before returning\n          state.inline = oldStateInline;\n          state._list = oldStateList;\n\n          return result;\n        });\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        };\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul';\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>;\n            })}\n          </Tag>\n        );\n      },\n    },\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n';\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>;\n      },\n    },\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        };\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        );\n      },\n    },\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'), state),\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : <span key={state.key}>{output(node.fallbackContent, state)}</span>;\n      },\n    },\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  );\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        );\n      },\n    },\n\n    tableSeparator: {\n      match: function(source, state) {\n        if (!state.inTable) {\n            return null;\n        }\n        return TABLE_SEPARATOR_R.exec(source);\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function() {\n          return { type: 'tableSeparator' };\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() { return ' | '; }\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: PARSE_PRIORITY_MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full;\n            }),\n        };\n      },\n      react(node /*, output, state*/) {\n        return node.content;\n      },\n    },\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: PARSE_PRIORITY_MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>;\n      },\n    },\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>;\n      },\n    },\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        };\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>;\n      },\n    },\n  };\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R);\n        const trimmer = new RegExp(`^${whitespace}`, 'gm');\n        const trimmed = capture[3].replace(trimmer, '');\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline;\n\n        const tagName = capture[1].toLowerCase();\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1;\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1]\n        };\n      },\n      react(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse ? node.content : output(node.content, state)}\n          </node.tag>\n        );\n      },\n    }\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        };\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />;\n      },\n    };\n  }\n\n  const parser = parserFor(rules);\n  const emitter = reactFor(ruleOutput(rules));\n\n  const jsx = compile(stripHtmlComments(markdown));\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          );\n        })}\n      </footer>\n    );\n  }\n\n  return jsx;\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n *\n * @param  {String}   options.children   must be a string\n * @param  {Object}   options.options    markdown-to-jsx options (arg 2 of the compiler)\n *\n * @return {ReactElement} the compiled JSX\n */\n\nexport default function Markdown({ children, options, ...props }) {\n  return React.cloneElement(compiler(children, options), props);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  const PropTypes = require('prop-types');\n\n  Markdown.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object,\n  };\n}\n","import React, { FC, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport Markdown from 'markdown-to-jsx';\nimport http from '../../services/api';\nimport { Entry } from '../../interfaces/entry.interface';\nimport { Diary } from '../../interfaces/diary.interface';\nimport { setCurrentlyEditing, setCanEdit } from './editorSlice';\nimport { updateDiary } from '../diary/diariesSlice';\nimport { updateEntry } from './entriesSlice';\nimport { showAlert } from '../../util';\nimport { useAppDispatch } from '../../store';\n\nconst Editor: FC = () => {\n  const { currentlyEditing: entry, canEdit, activeDiaryId } = useSelector(\n    (state: RootState) => state.editor\n  );\n\n  const [editedEntry, updateEditedEntry] = useState(entry);\n  const dispatch = useAppDispatch();\n\n  const saveEntry = async () => {\n    if (activeDiaryId == null) {\n      return showAlert('Please select a diary.', 'warning');\n    }\n    if (entry == null) {\n      http\n        .post<Entry, { diary: Diary; entry: Entry }>(\n          `/diaries/entry/${activeDiaryId}`,\n          editedEntry\n        )\n        .then((data) => {\n          if (data != null) {\n            const { diary, entry: _entry } = data;\n            dispatch(setCurrentlyEditing(_entry));\n            dispatch(updateDiary(diary));\n          }\n        });\n    } else {\n      http\n        .put<Entry, Entry>(`diaries/entry/${entry.id}`, editedEntry)\n        .then((_entry) => {\n          if (_entry != null) {\n            dispatch(setCurrentlyEditing(_entry));\n            dispatch(updateEntry(_entry));\n          }\n        });\n    }\n    dispatch(setCanEdit(false));\n  };\n\n  useEffect(() => {\n    updateEditedEntry(entry);\n  }, [entry]);\n\n  return (\n    <div className=\"editor\">\n      <header\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          alignItems: 'center',\n          marginBottom: '0.2em',\n          paddingBottom: '0.2em',\n          borderBottom: '1px solid rgba(0,0,0,0.1)',\n        }}\n      >\n        {entry && !canEdit ? (\n          <h4>\n            {entry.title}\n            <a\n              href=\"#edit\"\n              onClick={(e) => {\n                e.preventDefault();\n                if (entry != null) {\n                  dispatch(setCanEdit(true));\n                }\n              }}\n              style={{ marginLeft: '0.4em' }}\n            >\n              (Edit)\n            </a>\n          </h4>\n        ) : (\n          <input\n            value={editedEntry?.title ?? ''}\n            disabled={!canEdit}\n            onChange={(e) => {\n              if (editedEntry) {\n                updateEditedEntry({\n                  ...editedEntry,\n                  title: e.target.value,\n                });\n              } else {\n                updateEditedEntry({\n                  title: e.target.value,\n                  content: '',\n                });\n              }\n            }}\n          />\n        )}\n      </header>\n      {entry && !canEdit ? (\n        <Markdown>{entry.content}</Markdown>\n      ) : (\n        <>\n          <textarea\n            disabled={!canEdit}\n            placeholder=\"Supports markdown!\"\n            value={editedEntry?.content ?? ''}\n            onChange={(e) => {\n              if (editedEntry) {\n                updateEditedEntry({\n                  ...editedEntry,\n                  content: e.target.value,\n                });\n              } else {\n                updateEditedEntry({\n                  title: '',\n                  content: e.target.value,\n                });\n              }\n            }}\n          />\n          <button onClick={saveEntry} disabled={!canEdit}>\n            Save\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Editor;\n","import React, { FC } from 'react';\nimport Diaries from '../diary/Diaries';\nimport Editor from '../entry/Editor';\n\nconst Home: FC = () => {\n  return (\n    <div className=\"two-cols\">\n      <div className=\"left\">\n        <Diaries />\n      </div>\n      <div className=\"right\">\n        <Editor />\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}